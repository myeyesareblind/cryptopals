(ns cryptopals.vec-utils)

(defn vec-xor-vec 
  [x y]
  (vec (let [nx (count x)
             ny (count y)]
         (for [i (range (max nx ny))]
           (bit-xor
            (get x (rem i nx))
            (get y (rem i ny)))))))

(defn ham-dist
  [b]
  (loop [i 7
         r 0]
    (if (= -1 i)
      r
      (recur (dec i) (+ r (if (bit-test b i) 1 0))))))

(defn vec-hamm-dist 
  [x y]
  (apply + (map ham-dist (map bit-xor x y))))

(defn count-aprox-hamm-dist
  [x k-len]
  (let [part (take 10 (partition k-len x))]
    (loop [i 0
           r 0]
      (if (> i 10)
        r
        (recur (+ 2 i) (ham-dist (nth part i) (nth part (inc i))))))))
      
