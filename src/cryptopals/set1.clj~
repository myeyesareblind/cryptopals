(ns cryptopals.set1
  (:use [clojure.java.io])
  (:require [cryptopals.strutils :as svu]
            [cryptopals.vecutils :as vu]))

(defn detect-single-char-xor
  [s]
  (let [v (svu/hex-str->vec s)]
    (let [best-key (reduce (fn [x y]
              (if (> (svu/vec-score (map #(bit-xor x %) v))
                     (svu/vec-score (map #(bit-xor y %) v)))
                x
                y))
            (range 0xff))]
      (map #(bit-xor best-key %) v))))

(defn challenge-4
  []
  (with-open [rdr (reader "/Users/myeyesareblind/Downloads/4.txt")]
    (def best [])
    (doseq [line (line-seq rdr)]
      (when (> (svu/vec-score (detect-single-char-xor line))
               (svu/vec-score (detect-single-char-xor best)))
        (def best line)))
    (svu/vec->str (detect-single-char-xor best))))

(def challenge-5
  []
  (let [s "Burning 'em, if you ain't quick and nimble
I go crazy when I hear a cymbal"
        k "ICE"
        v-s (svu/str->vec s)
        v-k (svu/str->vec k)]
    (println (svu/vec->hex-str (vu/vec-xor-vec v-s v-k))))

 (let [s1 "this is a test"
       s2 "wokka wokka!!!"
       v1 (svu/str->vec s1)
       v2 (svu/str->vec s2)]
   (vu/vec-hamm-dist v1 v2))
 
(svu/base64-encode (svu/base64-decode "sfdkjhkjhsafdafskjh"))
 
(defn challenge-6
  []
  (let [f (slurp "/Users/myeyesareblind/Downloads/6.txt")
        enc-data (svu/base64-decode f)]
    (println f))
    (println (svu/str->vec enc-data)))
    (reduce #(assoc %1 %2 (vu/count-aprox-hamm-dist enc-data %2)) (range 2 41)))

;  (:import java.io.File)
;  (:require [clojure.java.io :as io]
;            [ez-image.core :as ez-image]
;            [me.raynes.fs :as fs])
;  (:import [java.io File]
;           [javax.imageio ImageIO]))
